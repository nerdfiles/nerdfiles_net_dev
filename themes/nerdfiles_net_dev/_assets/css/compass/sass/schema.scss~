// schemas for object-oriented stylesheets (OOSS); i.e. OOSASS
//
// @see http://engineering.appfolio.com/2012/11/16/css-architecture/, 
//      https://github.com/stubbornella/oocss/wiki/faq,
//      http://ianstormtaylor.com/oocss-plus-sass-is-the-best-way-to-css/

// CSSComponentView Specification
//
// Generally, the conceptual scheme is Backbone.js. We're trying to expose an outline for shared interaction model.
//
// USAGE: @include component-namespace;
//
//  <div class="component--newsletter-plugin>
//    <div class="component-header"></div>
//    <div class="component-footer events">
//      <ul>
//        <li><a href="/newsletter-submit" class="verb-namespace-N"></a>Submit</li>
//      </ul>
//    </div>
//  </div>

body {

  // Styling Only (no "Events" to think about)

  .component-namespace--object-namespace__sub-object-namespace--[.modifier-namespace-N] {

  }
  
  // e.g.

  .c--newsletter-plugin__mini-form { }
  .c--newsletter-plugin__mini-form--invalid { }

  // General ("Events")

  .component-namespace--object-namespace {

    &.modifier-namespace-N {
      @extend %modifier-namespace-N; // @note We only need the relevant modifiers once the stylesheet is parsed. Changing the modifier suggests, say, an overhaul or a business requirement change.
    } // e.g.: .modal, .multi; 

    &.predicate-namespace-N { 
      @extend .predicate-namespace-N; // @note We may want to change "states" in the DOM for debugging
    } // e.g.: .warning, .hidden, .invalid, .hover, etc.; usually the result (or think "end") of an action (verb) if a "js hook" is involved in the total interaction model for the module.
    
    // @events (interaction model that should be isomorphic with a "View" conceptualization of the component. We might call this "CSSComponentViews")
    &.events {
      .verb-namespace-N { // @note Think of an events object of a View here.
        @extend %verb-namespace-N;
      } // e.g.: Follow the naming convention in creating handlers should the module itself have a global interaction event in the total interaction model for the module.
    }
  }
}
